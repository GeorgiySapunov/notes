#+title: Python

* 1-1. Введение в Python.
** целочисленное деление
#+begin_src python
return 17//3
#+end_src

#+RESULTS:
: 5
** остаток от деления
#+begin_src python
return 17%3
#+end_src

#+RESULTS:
: 2
** убрать конец строки в многострочнике с \
#+begin_src python
return """\
hello
\
    world

hello
    world"""
#+end_src

#+RESULTS:
: hello
:     world
:
: hello
:     world
** в питоне всё является объектом (value, id, type)
#+begin_src python
a = 42 # value
return a, id(a), type(a)
#+end_src

#+RESULTS:
| 42 | 139797617029768 | <class | int | > |
** сравнение id и value
#+begin_src python
a = [1,2,3]
b = [1,2,3]
return a is b, a == b
#+end_src

#+RESULTS:
| False | True |
** изменяемые и неизмениемые объекты
В Python существуют *изменяемые* и *неизменяемые* типы.
К *неизменяемым* (immutable) типам относятся:
- целые числа (int),
- числа с плавающей точкой (float),
- комплексные числа (complex),
- логические переменные (bool),
- кортежи (tuple),
- строки (str),
- неизменяемые множества (frozen set).
К *изменяемым* (mutable) типам относятся:
- списки (list),
- множества (set),
- словари (dict).
При создании переменной, вначале создается объект, который имеет уникальный
идентификатор, тип и значение, после этого переменная может ссылаться на
созданный объект. Неизменяемость типа данных означает, что созданный объект
больше не изменяется.
** break и continue

* 2-2. Numpy
** разделитель в часлах
#+begin_src python
return 1_000_000
#+end_src

#+RESULTS:
: 1000000
** numpy ndarray
- array.shape
- array.strides
- array.reshape(-1, 2)
- array.flatten() # copy
- array.ravel() # view (same memory)
- array.T (или array.transpose) # view (same memory)
- array[np.newaxis, :] # copy, the same as array.reshape(1, *a.shape)
- np.expand_dims(array, axis=0)
** создание особых массивов
- np.zeros(shape=(2,3))
- np.zeros_like(array)
- np.arange(1, 10, 0.5) # от 1 до 10 (не включая 10) с шагом 0.5
- np.linspace(0, 1, 5, endpoint=True) # array([0., 0.25, 0.5, 0.75, 1.])
- np.array(array) # copy
- np.asarray(array) # view
- np.copy(array)
** other
- np.unravel_index(np.argmax(a), array.shape) # np.argmax(a) возврщает индекс в ravel, можно так пересчитать его в обычный индекс
- np.logical_not(array)
- ~array (или np.bitwise_not(array))) # для булевых массивов эквивалентен np.logical_not(array)
- np.random.randint(0, 10, size=array.shape)
- np.fmax(arraya, arrayb) # element wise maximum
- np.isclose(arraya, arrayb, rtol=1e-05, atol=1e-08) # так правильно сравнивать float массив с числом или другим массивом
- a & b -> np.bitwise_and(a, b) # конъюнкция, результат равен наименьшему операнду
- a | b -> np.bitwise_or(a, b) # дизъюнкция, истенен, когда хотя бы один аргумент истенен
- a ^ b -> np.bitwise_xor(a, b) # строгая дизъюнкция, истинен тогда и только тогда, когда один из аргументов истинен, а другой — ложен.
- array[slice(0,5,1)] == array[0:5:1]
- array[np.where(a > 0)] # одномерный массив с только теми значениями, которые больше нуля
** приведение размерностей (broadcasting)
правило:
- a_i == b_1
- a_i == 1
- b_i == 1
- Если размерности не совпадают, то к массиву меньшей размерности добавляются ведущие фиктивные размерности.
** пример с добавлением ведущей размерности
#+begin_src python
import numpy as np
a = np.arange(30).reshape(3, -1) # a = np.arange(30).reshape(3, 10)
b = np.arange(a.shape[1]) # b = np.arange(10), (10) последняя ось отвутствует (к массиву меньшей размерности добавились ведущие фиктивные размерности)
return a + b
#+end_src

#+RESULTS:
: array([[ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
:        [10, 12, 14, 16, 18, 20, 22, 24, 26, 28],
:        [20, 22, 24, 26, 28, 30, 32, 34, 36, 38]])

** пример с общей размерностью оси 0
#+begin_src python
import numpy as np
a = np.arange(30).reshape(3, -1) # a = np.arange(30).reshape(3, 10)
b = np.arange(a.shape[0])[:, np.newaxis] # b = np.arange(3).reshape(3, 1), размерность оси 1 равна 1
return a + b
#+end_src

#+RESULTS:
: array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
:        [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
:        [22, 23, 24, 25, 26, 27, 28, 29, 30, 31]])

** пример с различными размерностями
#+begin_src python
import numpy as np
a = np.arange(5).reshape(1, -1) # shape(1, 5)
b = a.reshape(-1, 1) # shape(5, 1)
return a + b
#+end_src

#+RESULTS:
: array([[0, 1, 2, 3, 4],
:        [1, 2, 3, 4, 5],
:        [2, 3, 4, 5, 6],
:        [3, 4, 5, 6, 7],
:        [4, 5, 6, 7, 8]])
** матричные операции
- np.matmul(a, b)
- np.dot(a, b)
- np.asmatrix(a) # view, перегружает операторы * и **
- np.matrix(a) # copy
** прихотливая индексация (Fancy indexing)
- Требуемые строки указываются в списке a[row1, row2, row3]
- Требуемые столбцы указываются в списке списков a[:, [col1, col2, col3]]
- Для трех элементов: a[[x1, x2, x3], [y1, y2, y3]]] (как в np.where())
- Указать ясно строки и столбцы: a[np.ix_([row1, row2, row3], [col1, col2])],
  чтобы не делать копию так: a[row1, row2, row3][: [col1, col2]] (здесь
  присваивание сработает в копию)
** сокращенная индексация
- a[..., 0]
- a[0, ...]
- a[..., 0, :]
** случаные числа
- np.random.rand(10) # 10 чисел от 0 до 1
- np.random.randint(0, 10, 10) # от 0 до 10 не включая, массив размерности 10
- np.random.permutation(10) # перестановка из 10 элементов
- np.random.choice(10, size=10) # выбор из подмножества с возвращением
** сортировка
- np.sort(axis=0) # copy
- array.sort(axis=0) # view
- array.argsort(axis=0)
** уникальные элементы
- np.unique(array)
** объединение массивов
- np.vstack((a, b))
- np.hstack((a, b))
- np.concatenate((a, b), axis=0)

* 3-3. PANDAS
** выбрать индекс и колонку
df.loc[["index1", "index2"],"column1"]
df.iloc[[0, 1], [1]]
** опции
df.set_option("display.max_columns", 100)
df.set_option("display.max_rows", 100)
df.set_option("display.precision", 3)
** категориальные признаки
Зачем нужны категориальные признаки в Pandas:
    - позволяют более эффективно обрабатывать категориальные признаки;
    - многие питоновские библиотеки меют встроенные методы по работе с категориальными признаками;
    - такие признаки занимают меньше места и также положительно сказываются на производительности.
Колличество категорий должно быть ограничено и много меньше числа строк.
[(col, df[col].nunique()) for col in df.columns]
unique_counts = pd.DataFrame.from_records([(col, df[col].nunique()) for col in df.columns],
                          columns=["Column_Name", "Num_Unique"]).sort_values(by=["Num_Unique"]) # выбираем
df['recclass'] = df["col"].astype('category')
** методы
df.shape
df.rename(columns = {'y':'year'})
df.info()
df.describe()
df.nlargest(3, "col1")
df.nsmallest(3, "col1")
df["col1"] = df["col1"].astype("float32") # сокращает используемую память
df.groupby(by="col1")["col2"].mean()
df.groupby(by="col1")["col2"].agg([np.mean, np.std, np.min, np.max]) # сразу несколько агрегирующих функций
df.sort_values(by=["col1", "col2"], ascending=[True, False])
df.apply(np.max) # применение функции к каждому столбцу/строке
df["col1"].map({"val1":"val1_changed", "val2":"val2_changed"}) # замена значений в колонке в соответствии со словарём
df.crosstab(df["col1"], df["col2"], normalize=True) # сводная таблица / матрица сопряженности
df["col1"].value_counts()
** merge, join, concatenate
*** *Concat* как правило используется для объединения таблиц по вертикальной или горизонтальной оси.
  df_new_ = pd.concat([df_a, df_b]) # по оси 0; индексы могут повторяться
  df_new_ = pd.concat([df_a, df_b], axis = 1) # по оси 1; имя колонок может повторяться; объединяет по индексам, если индекс только в одном df, то образуются пустые ячейки
  pd.concat([df_a, df_b],axis = 1,join='inner')
*** *Append* - частный случай метода Concat с параметрами (axis=0, join='outer')
  df_a.append(df_b)
*** Метод *Join* основан на объединении таблиц *через индексы* (способ объединения указывается с помощью параметра how = ['left','right','inner','outer']).
  df_a.join(df_b,rsuffix='_right_table',how = 'left') # суффикс добавляется к названию колонок
*** *Merge* используется для объединения таблиц *по любым колонкам* с помощью методов left_on и right_on.
  pd.merge(df_new, df_n, left_on='subject_id', right_on='subject_id')
  pd.merge(df_a, df_b, on='subject_id', how='left') # on= если имя столбца одинаково в обоих таблицах

* 4-4. Визуализация данных
** matplotlib
fig = plt.figure()
ax1 = fig.add_subplot(221)
*** метод plt.subplots создает новый рисунок и возвращает массив NumPy, содержащий созданные в нем объекты подграфиков:
fig, axes = plt.subplots(2, 3)#количество строк, столбцов
fig.set_figheight(5)
fig.set_figwidth(15)
axes[0,1].scatter(...)
axes[1,1].bar(...)
** Pandas
df["col1"].value_counts().plot.bar() # по убыванию
df["col1"].value_counts().sort_index().plot.bar() # фиксирует порядок
(df["col1"].value_counts()/len(df)).plot.bar() # относительне частоты
df["col1"].plot.line()
df["col1"].plot.hist(bins=10)
df.plot.scatter(x="col1", y="col2")
df.plot.hexbin(x="col1", y="col2", gridsize=25) # двумерная гистограмма
** Seaborn
import seaborn as sns
sns.countplot(df["col1"]) # # pandas bar = seaborn countplot; Нет нужды в value_counts
sns.kdeplot(df["col1"]) # сглаживание гистограммы, kde оденка плотности ядра
sns.distplot(df["col1"], kde=False) # гистограмма
sns.jointplot(x="col1", y="col2", data=df, kind="hex") # двумерная гистограмма
sns.boxplot(y="col1", y="col2", data=df)
- Границами ящика служат первый и третий квартили (25-й и 75-й процентили
  соответственно), 25 процентиль - число больше чем 25% наблюдений, 1 квартиль -
  25 персентиль, 2 квартиль - 50 процентиль или медиана, линия в середине ящика
  — медиана (50-й процентиль).
- Концы усов — края статистически значимой выборки (без выбросов), и они могут
  определяться несколькими способами. Наиболее распространённые значения,
  определяющие длину «усов»:
- Минимальное и максимальное наблюдаемые значения данных по выборке (в этом
  случае выбросы отсутствуют);
- Разность первого квартиля и полутора межквартильных расстояний; сумма третьего
  квартиля и полутора межквартильных расстояний. Интерквартильный размах -
  разница между квартилями
sns.violinplot(x="col1", y="col2", hue="col3", split=True, data=df)
sns.pairplot(df[cols].dropna())
sns.heatmap(df[cols].dropna().corr()) #  тепловая карта корреляций
** folium
визуализация карт

* 5-5. Углубленный Python. Часть 1
- dir(5) # атрибуты
- атрибуты функций
- распаковка словаря в аргументы функции **
** Обращение к данным напрямую для изменения:
  u_before[:] = u_after # присваивание внутри функции
  u_before.extend(u_after) # метод меняет данные
** Области видимости
LEGB: Local -> Enclosed -> Global -> Built-in
** Значения по-умолчанию для функций
- Значения по-умолчанию создаются при объявлении функции
- Хранятся в атребуте func.__defaults__
- Могут изменяться
- Чтобы значение по-умолчанию не изменялось:
  #+begin_src python
  def func(a=None):
      if a is None:
          a = []
  #+end_src
** functools
*** сортировка по key
#+begin_src python
from operator import itemgetter
a = [(1, 4), (4, 1), (3, 2)]
sorted(a, key=lambda pair: pair[1]) # пример 1
sorted(a, key=itemgetter(1)) # пример 2
#+end_src
*** фиксирование аргументов у функции
#+begin_src python
func = functools.partial(sorted, key=itemgetter(1))
func(a)
#+end_src
*** map
#+begin_src python
result = "1,2,3,4,5,6\n"
list(map(int, result.split(","))) # [1, 2, 3, 4, 5, 6]
#+end_src
- map -- это объект генератор. Для выполнения функции нужно извлечь из нее все значения.
- itertools starmap: map с распаковкой кортежей
*** filter
- оставляет только те объекты, которые удовлетворяют условию
- возвращает генератор
filter(lambda x: x > 0, range(-5, 5))
*** reduce
- последовательно применяет агрегирующую функцию
  [s1,s2,s3,s4]
  func(func(func(s1,s2),s3),s4)
#+begin_src python
from functools import reduce
#+end_src
*** zip
- zip_longest для zip по длинному объекту с заполнением None
#+begin_src python
a = [(1, 4), (4, 1), (3, 2)]
[tuple(map(itemgetter(i), a)) for i in range(len(a[0]))]
list(zip(*a)) # лучше так
#+end_src
** Декораторы
*** logger
#+begin_src python
import functools

def logger(func):
        @functools.wraps(func)
        def wrapper(*args, **argv):
            result = func(*args, **argv)
            #....
            return result
        return wrapper

@logger
def summator(a)
    return sum(a)
#+end_src

#+begin_src python
import functools

def logger(filename):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **argv):
           result = func(*args, **argv)
           #....
           return result
        return wrapper
    return decorator

@logger("filename.logs")
def summator(a)
    return sum(a)
#+end_src
*** cache
#+begin_src python
# пример. лучше использовать lru_cache
from time import sleep

def cached(func):
    cache = dict()
    @functools.wraps(func)
    def wrapper(*args):
        key = (func, args)
        if key not in cache:
            cache[key] = func(*args)
        return cache[key]
    return wrapper

@cached
def power2(x):
    sleep(3)
    return 2 ** x

print(power2(8))
print(power2(8))
print(power2(4))
print(power2(8))
print(power2(4))
#+end_src
#+begin_src python
from functools import lru_cache

@lru_cache(maxsize=5)
def power2(x):
    sleep(3)
    return 2 ** x

print(power2(8))
print(power2(8))
print(power2(4))
print(power2(8))
print(power2(4))
#+end_src
** Механизмы итерации
- объект iter()
- метод next()
- исключение StopIteration
** Генераторы
- быстрее, чем циклы
#+begin_src python
[2 * i if i % 2 else i // 2 for i in range(10)]
#+end_src
*** генераторы-функции
- ключевое слово yield
- yield from # выдаёт все значения разом из генератора
#+begin_src python
def recursive_gen(a_curr, a_delta, a_max=5):
    yield a_curr

    if a_delta > 0:
        if a_curr + a_delta < a_max:
            yield from recursive_gen(a_curr + a_delta, a_delta)
        else:
            yield from recursive_gen(a_curr + a_delta, -a_delta)
    elif a_delta < 0 and a_curr + a_delta >= 0:
        yield from recursive_gen(a_curr + a_delta, a_delta)

def complex_gen(a_delta, a_max):
    yield from recursive_gen(0, a_delta, a_max)

print(*complex_gen(1, 5))
#+end_src
** Генераторы ~ корутины
Генераторы — корутины, они могут:
- приостанавливать свое выполнение, сохраняя текущее состояние, и отдавать управление другой "программе";
- продолжать выполнение с сохраненного места.
#+begin_src python
def accumulator():
    total = 0
    while True:
        value = yield total
        print(f"Accepted: {value}")

        if value is None:
            break
        else:
            total += value
    yield total

gen = accumulator()

print('Sum: {}'.format(next(gen)))     # next(gen) ~ gen.send(None)
print('Sum: {}'.format(gen.send(1))) # сохраняет значение в value
print('Sum: {}'.format(gen.send(2)))

next(gen)   # same as gen.send(None)

# Sum: 0
# Accepted: 1
# Sum: 1
# Accepted: 2
# Sum: 3
# Accepted: None
# 3
#+end_src
*** метод close
#+begin_src python
def accumulator_wrapper():
    try:
        yield from accumulator()
    except GeneratorExit as e:
        print("Okay...")
gen = accumulator_wrapper()
gen.send(None)
gen.send(1)
gen.send(2)
gen.close()

# Accepted: 1
# Accepted: 2
# Okay...
#+end_src
** модуль itertools
- zip_longest: zip по длинному объекту с заполнением None
- starmap: map с распаковкой кортежей
- chain: объединяет несколько итераторов в один
- islice: срез над генераторами и итераторами
- tee: копирование генераторов
- cycle: позволяет циклично обходить коллекцию или генератор
- groupby: позволяет группировать значения в генераторе или списке по ключу

* 6-6. Углубленный Python. Часть 2
** вывод атрибутов класса
- все атрибуты выводит функция dir(class)
- только перегруженные методы выводит class_instance.__dict__
** доступ к атрибуту по имени
- getattr(class, "atribute_name")
** class_instance.method() == Class.method(class_instance)
- str.upper("abc") == "abc".upper()
- set.union({1, 2}, {3, 4}) == {1, 2}.union({3, 4})
** Инкапсуляция
- public (class.attribute)
- protected (class._attribute)
- private (class.__attribute) переименовываются внутри класса
** Изменение значения атрибутов у класса, а не у экземпляра класса
- Class.attribute = ...
- "@classmethod" (cls вместо self). Предпочтительно вызывать через класс, а не через экземпляр класса.
** "@staticmethod" методы не имеют доступа к экземплярам классов и самому классу (к аттрибутам и методам).
- Не принимают self или cls.
- Требуют явного указания имени класса.
- Предпочтительно вызывать через класс, а не через экземпляр класса.
** Вычислимые атрибуты класса (property)
- setter
- getter
- deleter
** read-only аттрибут с декоратором "@property"
** __slots__ фиксирует аттрибуты. Другие аттрибуты создать будет нельзя.
- экономит память
** eval(str) выполняет строку как код.
** singleton во всей программе только один экземпляр класса. (например None)
- перегружая метод __new__
** декораторы для классов
** функция -- это класс с методом __call__
** итераторы
- метод __iter__(self)
- метод __next__(self)
** метод __contains__ для in
** метод __hash__ для рассчета хеша объекта
** super() для доступа к методам класса родителя
- обращается к следующему объекту из множества __mro__ класса, из которого вызывается функция.
- super(Class, self) # super обращается к классу после класса Class в цепочке __mro__ класса self
** абстрактные классы нельзя инстанцировать "@abstractmethod"
** множественное наследование
- Атрибут __mro__ для разрешения (resolution) вызовов методов
** isinstance(class_parent, class)
** исключения
- raise
- класс ошибки -- это подкласс Exception. except Exception для ловли всех исключений (просто except тоже работает).
** issubclass()
** менеджер контекста
** модуль collections
- defaultdict
- Counter
- namedtuple
** from dataclasses import dataclass
"@dataclass"
* 7-7. Парсинг данных с помощью Python
* 8-10. Временные ряды
* 9-11. Введение в SQL
